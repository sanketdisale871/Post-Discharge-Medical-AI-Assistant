import os
from typing import Any, List, Dict, Optional, Type

from langchain_google_genai import ChatGoogleGenerativeAI
from langchain.prompts import PromptTemplate
from langgraph.prebuilt import create_react_agent


class BaseAgent:
    """Base Agent class that follows ReACT Strategy with access to tools"""

    def __init__(
        self,
        model: str,
        tools: List[Any],
        prompt: str,
        response_format: Type[Any] = None,
    ) -> None:
        """Initializes the BaseAgent with the model, tools, and prompt

        Args:
            model (str): The model to use for the agent
            tools (List[Any]): The tools to use for the agent
            prompt (str): The prompt to use for the agent
        """

        self.tools = tools
        self.prompt = prompt
        api_key = os.getenv("GEMINI_API_KEY")

        if not api_key:
            raise ValueError("GEMINI_API_KEY environment variable is not set.")

        self.model = ChatGoogleGenerativeAI(
            model="gemini-1.5-flash", temperature=1.0, google_api_key=api_key
        )

        self.is_structured_output = response_format is not None

        self.agent_executor = create_react_agent(
            self.model,
            self.tools,
            prompt=self.prompt,
            response_format=response_format,
        )

    def invoke(
        self,
        user_input: str,
        access_token: Optional[str] = None,
        chat_history: Optional[List[Dict]] = None,
    ) -> str:
        """Generates a response from the agent based on the user input and chat history.

        Args:
            user_input (str): The user input to generate the response.
            access_token (Optional[str]): The optional access token for accessing the Qest API tools.
            chat_history (Optional[List[Dict]]): The optional chat history to use for maintaining context across interactions.

        Returns:
            str: The response generated by the agent.
        """

        try:
            chat_history = chat_history or []
            messages = chat_history + [{"role": "user", "content": user_input}]

            response = self.agent_executor.invoke(
                {"messages": messages},
                config={"configurable": {"access_token": access_token}},
            )

            if self.is_structured_output:
                return response["structured_response"]

            return response["messages"][-1].content

        except KeyError as e:
            return f"An unexpected response format was encountered. Please try again. - {e}"

        except Exception as e:
            return f"The response was not generated due to an internal error. Please try again later. - {e}"
